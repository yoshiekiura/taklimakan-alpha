pipeline {
  agent any
  stages {
    stage('Ask for Branch Id & checkout this revision') {
      when {
        branch 'release/**'
      }
      steps {
        script {
          def commitId = input(
            id: 'userInput', message: 'Enter branch commit ID (Empty for latest)?',
            parameters: [
              string(defaultValue: '',
              description: 'Branch commit ID',
              name: 'CommitId'),
            ])
            if (commitId != "") {
              def command = "git cat-file -t ${commitId}"
              def commitExist=sh(returnStdout: true, script: command)
              echo("commitExist= \"${commitExist}\"; commitId= \"${commitId}\"")
              assert commitExist != "commit" && commitId != "": "Branch with commit Id: ${commitId} not exist"
              echo ("Commit exist. Proceed Deployment.")

              echo("${commitId}")
              def fetchcmd = sh(returnStdout: true, script: 'git fetch')
              command = "git checkout ${commitId}"
              def checkoutcmd = sh(returnStdout: true, script: command)
              echo("${checkoutcmd}")
            }
            else
            {
              echo("Use HEAD revision")
            }
          }

        }
      }
      stage('Test') {
        steps {
          sh 'echo "execute Unit tests"'
        }
      }
      stage('Static Analysis') {
        parallel {
          stage('Static Analysis') {
            steps {
              echo 'Static Analysis'
            }
          }
          stage('Analitics') {
            steps {
              sh '''#!/bin/bash

if [ ! -f pylint.cfg ]
then
  # generate pylint configuration file if not exist
  pylint --generate-rcfile > pylint.cfg
fi

for entry in `ls services/analytics/*.py`; do
    echo $entry
    name=$(basename $entry)
    pylint --rcfile=pylint.cfg --msg-template="{path}:{line}: [{msg_id}, {obj}] {msg} ({symbol})" $entry > pylint_$name.log
done



#return 0 to be able to continue execution of jenkins steps
exit 0

'''
              warnings(consoleParsers: [[parserName: 'PyLint']], parserConfigurations: [[parserName: 'PyLint', pattern: 'pylint*.log']])
              archiveArtifacts 'pylint_*.log'
            }
          }
        }
      }
      stage('Archive & Deploy') {
        when {
          anyOf {
            branch 'master'
            branch 'release/**'
            branch 'develop'
          }

        }
        steps {
          sh '''echo "display git branch info to make sure that branch is switch to Commit"
git branch'''
          sh '''#!/bin/bash -x
echo "#!/bin/bash" > deploy.bash
echo "#########################################################" >> deploy.bash
echo "# deploy.bash" >> deploy.bash
echo "#" >> deploy.bash
echo "# WARNING: This script is autogenerated by Jenkins" >> deploy.bash
echo "#   all changes maid into this script will be lost" >> deploy.bash
echo "#   after Jenkins deploy project one more time" >> deploy.bash
echo "#" >> deploy.bash
echo "# ALERT: DO NOT EXECUTE this script manually" >> deploy.bash
echo "#" >> deploy.bash
echo "# Purpose:" >> deploy.bash
echo "#   This script is used to deploy new version of site" >> deploy.bash
echo "# Inputs:" >> deploy.bash
echo "#   $1 - zip file name which contain new version of site" >> deploy.bash
echo "#   $2 - version of this deploy (generated by Jenkins)" >> deploy.bash
echo "#" >> deploy.bash
echo "#########################################################" >> deploy.bash
echo "" >> deploy.bash
echo "if [ $# != 2 ]; then" >> deploy.bash
echo "  echo \\"Deploy is not successful. Wrong number of arguments $# .. $1 .. $2\\"" >> deploy.bash
echo "  exit 1" >> deploy.bash
echo "fi" >> deploy.bash
echo "" >> deploy.bash
echo "if [ ! -f DEPLOY/$1 ]; then" >> deploy.bash
echo "  echo \\"Deploy is not successful. Deploy file is not exist: $1.zip\\"" >> deploy.bash
echo "  exit 1" >> deploy.bash
echo "fi" >> deploy.bash
echo "" >> deploy.bash
echo "zip_name=$1" >> deploy.bash
echo "version_id=$2" >> deploy.bash
echo "" >> deploy.bash
echo "#1. Create version folder" >> deploy.bash
echo "if [ ! -d DEPLOY/$version_id ]; then" >> deploy.bash
echo "  mkdir DEPLOY/$version_id" >> deploy.bash
echo "  #1. unzip taklimakan-alpha.zip" >> deploy.bash
echo "  mv DEPLOY/$zip_name.zip DEPLOY/$version_id" >> deploy.bash
echo "  unzip -q DEPLOY/$version_id/$zip_name.zip -d DEPLOY/$version_id" >> deploy.bash
echo "  mv -f DEPLOY/$version_id/$zip_name/* DEPLOY/$version_id" >> deploy.bash
echo "  #remove temp folder" >> deploy.bash
echo "  rm -rf DEPLOY/$version_id/$zip_name" >> deploy.bash
echo "  #remove zip file which used to deploy" >> deploy.bash
echo "  rm -rf DEPLOY/$version_id/$zip_name.zip" >> deploy.bash
echo "else" >> deploy.bash
echo "  echo \\"Deploy is not successful. Deploy version already exist\\"" >> deploy.bash
echo "  exit 1" >> deploy.bash
echo "fi" >> deploy.bash
echo "" >> deploy.bash
echo "#2. install composer" >> deploy.bash
echo "cd DEPLOY/$version_id" >> deploy.bash
echo "composer install" >> deploy.bash
echo "" >> deploy.bash
echo "# return to /var/www/ folder" >> deploy.bash
echo "cd /var/www/" >> deploy.bash
echo "" >> deploy.bash
echo "#3. (TODO) verify composer installation process (awk or grep log)" >> deploy.bash
echo "" >> deploy.bash
echo "#4. Create symlinks" >> deploy.bash
echo "./createSL.bash $version_id" >> deploy.bash
'''
          sh '''#!/bin/bash -x
echo "#!/bin/bash" > createSL.bash
echo "#########################################################" >> createSL.bash
echo "# createSL.bash" >> createSL.bash
echo "#" >> createSL.bash
echo "# WARNING: This script is autogenerated by Jenkins" >> createSL.bash
echo "#   all changes maid into this script will be lost" >> createSL.bash
echo "#   after Jenkins deploy project one more time" >> createSL.bash
echo "#" >> createSL.bash
echo "# Purpose:" >> createSL.bash
echo "#   This script is used to create Symbolic Links from" >> createSL.bash
echo "#     files and folders to the deployed version of site" >> createSL.bash
echo "#   It is possible to use this script to rollback" >> createSL.bash
echo "#     changes maid by the deploy just mention version" >> createSL.bash
echo "#     which need to be set now as working version." >> createSL.bash
echo "#" >> createSL.bash
echo "# Input:" >> createSL.bash
echo "#   versionId - is version uniq id which used to set SL" >> createSL.bash
echo "#     folder with versionId should exist in DEPLOY folder" >> createSL.bash
echo "#     If folder not exist then versionId.zip should exist" >> createSL.bash
echo "#     in DEPLOY folder and in this case it means that" >> createSL.bash
echo "#     version will be rolled back to previous version" >> createSL.bash
echo "#     current version will be zipped and could be used" >> createSL.bash
echo "#     in future" >> createSL.bash
echo "#" >> createSL.bash
echo "# Examples:" >> createSL.bash
echo "#   createSL.bash 1d3f74d.23" >> createSL.bash
echo "#   createSL.bash 15" >> createSL.bash
echo "#" >> createSL.bash
echo "#########################################################" >> createSL.bash
echo "" >> createSL.bash
echo "if [ $# != 1 ]; then" >> createSL.bash
echo "  echo "Deploy is not success. Deploy version is not set"" >> createSL.bash
echo "  exit 1;" >> createSL.bash
echo "fi" >> createSL.bash
echo "" >> createSL.bash
echo "versionId=$1" >> createSL.bash
echo "" >> createSL.bash
echo "if [ ! -d DEPLOY/$versionId ]; then" >> createSL.bash
echo "  if [ ! -f DEPLOY/$versionId.zip ]; then" >> createSL.bash
echo "    echo \\"Deploy is not success. Previous version is not exist\\"" >> createSL.bash
echo "    exit 1;" >> createSL.bash
echo "  fi" >> createSL.bash
echo "  # unzip previous version" >> createSL.bash
echo "  unzip -q DEPLOY/$versionId.zip -d DEPLOY" >> createSL.bash
echo "" >> createSL.bash
echo "  # remove zip file" >> createSL.bash
echo "  rm -rf DEPLOY/$versionId.zip" >> createSL.bash
echo "fi" >> createSL.bash
echo "" >> createSL.bash
echo "#folder DEPLOY/$versioId exist now just create SL" >> createSL.bash
echo "#  for all files/folder in it except public" >> createSL.bash
echo "#  create links for all objects in public folder" >> createSL.bash
echo "#  except \\"images\\" it will remain the same as before" >> createSL.bash
echo "for entry in `ls -d DEPLOY/$versionId/*`; do" >> createSL.bash
echo "  name=$(basename $entry)" >> createSL.bash
echo "" >> createSL.bash
echo "  if [ \\"$name\\" != \\"public\\" ]; then" >> createSL.bash
echo "    if [[ $name != *\\".zip\\"* ]]; then" >> createSL.bash
echo "      if [ -f $entry ]; then" >> createSL.bash
echo "        # remove file or folder" >> createSL.bash
echo "        rm -rf $name" >> createSL.bash
echo "      fi" >> createSL.bash
echo "      # create new symbolic link" >> createSL.bash
echo "      ln -sfn $entry $name" >> createSL.bash
echo "    fi" >> createSL.bash
echo "  fi" >> createSL.bash
echo "done" >> createSL.bash
echo "" >> createSL.bash
echo "# Special folder public is not used as" >> createSL.bash
echo "#   symlink since it is necessary to leave" >> createSL.bash
echo "#   /var/www/public/images as is all other" >> createSL.bash
echo "#   files and folders will be used as symlink" >> createSL.bash
echo "if [ ! -d public ]; then" >> createSL.bash
echo "  mkdir public" >> createSL.bash
echo "  mkdir public/images" >> createSL.bash
echo "fi" >> createSL.bash
echo "" >> createSL.bash
echo "for public_entry in `ls -d DEPLOY/$versionId/public/*`; do" >> createSL.bash
echo "  shortname=$(basename $public_entry)" >> createSL.bash
echo "  #create symbolic links inside public for all items except images" >> createSL.bash
echo "  if [ \\"$shortname\\" != \\"images\\" ]; then" >> createSL.bash
echo "    # create new symbolic link" >> createSL.bash
echo "    cd public" >> createSL.bash
echo "    # remove existing file/folder/symlink" >> createSL.bash
echo "    if [ -f $shortname ]; then" >> createSL.bash
echo "      # remove file or folder" >> createSL.bash
echo "      rm -rf $shortname" >> createSL.bash
echo "    fi" >> createSL.bash
echo "" >> createSL.bash
echo "    ln -sfn ../$public_entry $shortname" >> createSL.bash
echo "    cd .." >> createSL.bash
echo "  fi" >> createSL.bash
echo "done" >> createSL.bash
echo "" >> createSL.bash
echo "cd DEPLOY" >> createSL.bash
echo "#zip previous version of deploy" >> createSL.bash
echo "for folderToZip in `ls -d *`; do" >> createSL.bash
echo "  if [ -d $folderToZip ]; then" >> createSL.bash
echo "    if [ \\"$folderToZip\\" != \\"$versionId\\" ]; then" >> createSL.bash
echo "      echo \\"zip previous version: $folderToZip\\"" >> createSL.bash
echo "      zip -r -m -q  $folderToZip.zip $folderToZip" >> createSL.bash
echo "    fi" >> createSL.bash
echo "  fi" >> createSL.bash
echo "done" >> createSL.bash
echo "" >> createSL.bash
echo "echo \\"Deploy succeed. Used version: $versionId\\"" >> createSL.bash
'''
          sh '''#!/bin/bash
if [ -d taklimakan-alpha ]; then
  # remove previous deploy data
  rm -rf taklimakan-alpha
fi

mkdir taklimakan-alpha

for D in *; do
  if [ $D != "taklimakan-alpha" ] && [ $D != ".git" ] && [ $D != "Jenkinsfile" ] && [ $D != "CodeAnalysis" ]; then
    # copy to taklimakan-alpha
    if [ -d "${D}" ]; then
      cp -R $D taklimakan-alpha/
    else
      cp $D taklimakan-alpha/
    fi
  fi
done

#zip deploy file
zip -r -q -m taklimakan-alpha.zip taklimakan-alpha
'''
          archiveArtifacts '*.zip'
          sshagent(credentials: ['BlockChain'], ignoreMissing: true) {
            sh '''#!/bin/bash
dir
echo "Branch Name: $BRANCH_NAME"
if [ "$BRANCH_NAME" == "master" ]
then
  DEPLOY_HOST="192.168.100.127"
  DEPLOY_PORT="8022"
else
  if [ "$BRANCH_NAME" == "develop" ]
  then
    DEPLOY_HOST="192.168.100.125"
    DEPLOY_PORT="8022"
  else
    #release branch
    DEPLOY_HOST="192.168.100.126"
    DEPLOY_PORT="8022"
  fi
fi
echo "Deploy Host: $DEPLOY_HOST:$DEPLOY_PORT"

echo "Upload file to host"
ssh tkln@$DEPLOY_HOST -p $DEPLOY_PORT mkdir -p /var/www/DEPLOY
scp -P $DEPLOY_PORT taklimakan-alpha.zip tkln@$DEPLOY_HOST:/var/www/DEPLOY/taklimakan-alpha.zip
scp -P $DEPLOY_PORT deploy.bash tkln@$DEPLOY_HOST:/var/www/deploy.bash
scp -P $DEPLOY_PORT createSL.bash tkln@$DEPLOY_HOST:/var/www/createSL.bash

echo "Run deploy script"
ssh tkln@$DEPLOY_HOST -p $DEPLOY_PORT chmod -f 777 /var/www/deploy.bash
ssh tkln@$DEPLOY_HOST -p $DEPLOY_PORT chmod -f 777 /var/www/createSL.bash
OUTPUT="$(git log --pretty=format:\'%h\' -n 1)"
ssh tkln@$DEPLOY_HOST -p $DEPLOY_PORT /var/www/deploy.bash \'taklimakan-alpha $OUTPUT.$BUILD_NUMBER\'
'''
          }

        }
      }
    }
  }